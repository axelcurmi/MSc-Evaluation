IMPORTS
{
	import java.util.Arrays;
	import java.util.ArrayList;

	import com.axelcurmi.eventreplayer.Event;
}

GLOBAL
{
	VARIABLES
	{
		int minimumPacketSize = 8;
		int AES128BlockSize = 16;
		
		long REKEY_MAX_BYTES = 1073741824l;
		long REKEY_MAX_PACKETS = 268435456;
		
		long cachedSentBytes = 0;
		long cachedSentPackets = 0;
		long cachedReceivedBytes = 0;
		long cachedReceivedPackets = 0;
		
		%%	1-19		=>	Transport layer generic (e.g., disconnect, ignore, debug, etc.)
		%%		5	=>	SSH_MSG_SERVICE_REQUEST
		%%		6	=>	SSH_MSG_SERVICE_ACCEPT
		%%	20-29		=>	Algorithm negotiation
		%%		20	=>	SSH_MSG_KEXINIT
		%%		21	=>	SSH_MSG_NEWKEYS
 		%%	30-49		=>	Key exchange method specific (numbers can be reused for different authentication methods)
		ArrayList<Integer> validCommandIdsAfterKexInit = new ArrayList<Integer>(Arrays.asList(
				1,  2,  3,  4,  7,  8,  9,  10, 11, 12,
				13, 14, 15, 16, 17, 18, 19, 21, 22, 23,
				24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
				34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
				44, 45, 46, 47, 48, 49)
		);
		%% Once a party has sent a SSH_MSG_KEXINIT message for key exchange or re-exchange,
		%% until it has sent a SSH_MSG_NEWKEYS message (Section 7.3), it MUST NOT send any messages other than:
		%%	- Transport layer generic messages (1 to 19) (but SSH_MSG_SERVICE_REQUEST and SSH_MSG_SERVICE_ACCEPT MUST NOT be sent)
		%%	- Algorithm negotiation messages (20 to 29) (but further SSH_MSG_KEXINIT messages MUST NOT be sent)
		%%	- Specific key exchange method messages (30 to 49)
		
		boolean identificationStringReceived = false;
		boolean identificationStringSent = false;
	}

	EVENTS
	{
		before_connect(
			Event e,
			boolean hostInSystemHostKeys,
			boolean hostInHostKeys
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("connect")
			} where {
				hostInSystemHostKeys = (boolean)e1.getWatch().get("host_in_system_host_keys");
				hostInHostKeys = (boolean)e1.getWatch().get("host_in_host_keys");
				e = e1;
			}

		sshException_connect(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("SSHException") &&
				e1.getWhat().equals("connect")
			} where {
				e = e1;
			}

		after_connect(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("connect")
			} where {
				e = e1;
			}

		before_send_kex_init(
			Event e, ArrayList<String> preferredCiphers
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("_send_kex_init")
			} where {
				preferredCiphers = (ArrayList<String>)e1.getWatch().get("preferred_ciphers");
				e = e1;
			}

		before_constant_time_bytes_eq(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("constant_time_bytes_eq")
			} where {
				e = e1;
			}
			
		before_parse_kexdh_reply(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("_parse_kexdh_reply")
			} where {
				e = e1;
			}
		
		after_parse_kexdh_reply(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("_parse_kexdh_reply")
			} where {
				e = e1;
			}
		
		after_parse_newkeys(
			Event e,
			boolean bytesEqual
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("_parse_newkeys")
			} where {
				bytesEqual = (boolean)e1.getWatch().get("bytes_equal");
				e = e1;
			}
			
		before_verify_ssh_sig_aspect(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("verify_ssh_sig_aspect")
			} where {
				e = e1;
			}
			
		after_build_packet(
			Event e,
			double packetLength,
			double paddingLength
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("_build_packet")
			} where {
				packetLength = (double)e1.getWatch().get("packet_length");
				paddingLength = (double)e1.getWatch().get("padding_length");
				e = e1;
			}
			
		sshexception_check_banner(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("SSHException") &&
				e1.getWhat().equals("_check_banner")
			} where {
				e = e1;
			}

		before_read_message(
			Event e,
			boolean isMACEngineSet,
			long receivedBytes,
			long receivedPackets
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("read_message")
			} where {
				isMACEngineSet = (boolean)e1.getWatch().get("mac_engine_set");
				receivedBytes = ((Double)e1.getWatch().get("received_bytes")).longValue();
				receivedPackets = ((Double)e1.getWatch().get("received_packets")).longValue();
				e = e1;
			}
		
		eof_read_message(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("EOFError") &&
				e1.getWhat().equals("read_message")
			} where {
				e = e1;
			}
		
		after_read_message(
			Event e,
			int commandId
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("read_message")
			} where {
				commandId = e1.getWatch().get("command_id") == null ? -1 : ((Double)e1.getWatch().get("command_id")).intValue();
				e = e1;
			}

		before_send_message(
			Event e,
			int commandId,
			long sentBytes,
			long sentPackets
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("send_message")
			} where {
				commandId = ((Double)e1.getWatch().get("command_id")).intValue();
				sentBytes = ((Double)e1.getWatch().get("sent_bytes")).longValue();
				sentPackets = ((Double)e1.getWatch().get("sent_packets")).longValue();
				e = e1;
			}
			
		before_handle(
			Event e
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("handle")
			} where {
				e = e1;
			}
			
		before_write_all(
			Event e,
			String message
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("BEFORE") &&
				e1.getWhat().equals("write_all")
			} where {
				message = (String) e1.getWatch().get("message");
				e = e1;
			}
			
		after_readline(
			Event e,
			String message
		) = { Event e1.replay() }
			filter {
				e1.getWhen().equals("AFTER") &&
				e1.getWhat().equals("readline")
			} where {
				message = (String) e1.getWatch().get("message");
				e = e1;
			}
	}

	PROPERTY noneCipherProperty
	{
		STATES
		{
			BAD { bad }
			STARTING { good }
		}
		
		TRANSITIONS
		{
			good -> bad [ before_send_kex_init \ preferredCiphers.contains("none") ]
		}
	}
	
	PROPERTY newHostProperty
	{
		STATES
		{
			BAD { noExceptionThrown }
			NORMAL { shouldThrowException }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> shouldThrowException [ before_connect \ !(hostInSystemHostKeys || hostInHostKeys) ]
			shouldThrowException -> start [ sshException_connect ]
			shouldThrowException -> noExceptionThrown [ after_connect ]
		}
	}
	
	PROPERTY checkMACProperty
	{
		STATES
		{
			BAD { notCheckedMAC }
			NORMAL { shouldCheckMAC }
			STARTING { start }
		}

		TRANSITIONS
		{
			start -> shouldCheckMAC [ before_read_message \ isMACEngineSet ]
			shouldCheckMAC -> start [ before_constant_time_bytes_eq ]
			shouldCheckMAC -> start [ eof_read_message ]
			shouldCheckMAC -> notCheckedMAC [ after_read_message ]
		}
	}
	
	PROPERTY verifyHostKeyProperty
	{
		STATES
		{
			BAD { notVerifiedHostKey }
			NORMAL { shouldVerifyHostKey }
			STARTING { start }
		}

		TRANSITIONS
		{
			start -> shouldVerifyHostKey [ before_parse_kexdh_reply ]
			shouldVerifyHostKey -> start [ before_verify_ssh_sig_aspect ]
			shouldVerifyHostKey -> notVerifiedHostKey [ after_parse_kexdh_reply ]
		}
	}

	PROPERTY clearedDHValuesProperty
	{
		STATES
		{
			BAD { bad }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> bad [ after_parse_newkeys \ bytesEqual \ System.out.println("--> " + e.toString()); ]
		}
	}
	
	PROPERTY paddingSizeProperty
	{
		STATES
		{
			BAD { bad }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> bad [ after_build_packet \ paddingLength < 4 ]
		}
	}
	
	PROPERTY packetSizeProperty
	{
		STATES
		{
			BAD { bad }
			NORMAL { encryptedMessages }
			STARTING { unencryptedMessages }
		}
		
		TRANSITIONS
		{
			unencryptedMessages -> encryptedMessages [ after_parse_newkeys ]
			unencryptedMessages -> bad [ after_build_packet \ packetLength % minimumPacketSize != 0 \ System.out.println("--> " + e.toString()); ]
			encryptedMessages -> bad [ after_build_packet \ packetLength % AES128BlockSize != 0 \ System.out.println("--> " + e.toString()); ]
		}
	}
	
	PROPERTY invalidMessagesProperty
	{
		STATES
		{
			BAD { invalidMessageSent }
			NORMAL { kexInitSent }
			STARTING { start }
		}

		TRANSITIONS
		{
			start -> kexInitSent [ before_send_message \ commandId == 20 ] %% SSH_MSG_KEXINIT
			kexInitSent -> start [ before_send_message \ commandId == 21 ] %% SSH_MSG_NEWKEYS
			kexInitSent -> invalidMessageSent [ before_send_message \ !validCommandIdsAfterKexInit.contains(commandId) \ System.out.println("--> " + e.toString()); ]
		}
	}
	
	PROPERTY subsequentAuthRequestsProperty
	{
		STATES
		{
			BAD { illegalRequestSent }
			NORMAL { cannotSendRequest }
			STARTING { canSendRequest }
		}
		
		TRANSITIONS
		{
			canSendRequest -> cannotSendRequest [ before_send_message \ commandId == 50 ] %% SSH_MSG_USERAUTH_REQUEST
			cannotSendRequest -> canSendRequest [ after_read_message \ commandId == 51 ] %% SSH_MSG_USERAUTH_FAILURE
			cannotSendRequest -> canSendRequest [ after_read_message \ commandId == 52 ] %% SSH_MSG_USERAUTH_SUCCESS
			cannotSendRequest -> illegalRequestSent [ before_send_message \ commandId == 50 ] %% SSH_MSG_USERAUTH_REQUEST
		}
	}
	
	PROPERTY subsequentServiceRequestsProperty
	{
		STATES
		{
			BAD { illegalDataSent }
			NORMAL { cannotSendData }
			STARTING { canSendData }
		}
		
		TRANSITIONS
		{
			canSendData -> cannotSendData [ before_send_message \ commandId == 5 ] %% SSH_MSG_SERVICE_REQUEST
			cannotSendData -> canSendData [ after_read_message \ commandId == 6 ] %% SSH_MSG_SERVICE_ACCEPT
			cannotSendData -> illegalDataSent [ before_send_message ]
		}
	}
	
	PROPERTY rekeyProperty
	{
		STATES
		{
			BAD { missedRekey }
			NORMAL { postNewKeys }
			STARTING { kex }
		}
		
		TRANSITIONS
		{
			kex -> postNewKeys [ after_parse_newkeys
				\ \ cachedSentBytes = 0; cachedReceivedBytes = 0; cachedSentPackets = 0; cachedReceivedPackets = 0;
			]

			postNewKeys -> kex [ before_send_kex_init ]

			postNewKeys -> postNewKeys [ before_send_message
				\ cachedSentBytes + cachedReceivedBytes <= REKEY_MAX_BYTES && cachedSentPackets + cachedReceivedPackets <= REKEY_MAX_PACKETS
				\ cachedSentBytes = sentBytes;  cachedSentPackets = sentPackets;
			]
			postNewKeys -> postNewKeys [ before_read_message
				\ cachedSentBytes + cachedReceivedBytes <= REKEY_MAX_BYTES && cachedSentPackets + cachedReceivedPackets <= REKEY_MAX_PACKETS
				\ cachedReceivedBytes = receivedBytes;  cachedReceivedPackets = receivedPackets;
			]
			
			postNewKeys -> missedRekey [ before_send_message
				\ cachedSentBytes + cachedReceivedBytes > REKEY_MAX_BYTES || cachedSentPackets + cachedReceivedPackets > REKEY_MAX_PACKETS
				\ System.out.println("--> " + e.toString());
			]
			postNewKeys -> missedRekey [ before_read_message
				\ cachedSentBytes + cachedReceivedBytes > REKEY_MAX_BYTES || cachedSentPackets + cachedReceivedPackets > REKEY_MAX_PACKETS
				\ System.out.println("--> " + e.toString());
			]
		}
	}
	
	PROPERTY loggingProperty
	{
		STATES
		{
			BAD { bad }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> bad [ before_handle ]
		}
	}
	
	PROPERTY identificationStringProperty
	{
		STATES
		{
			ACCEPTING { sentAndReceived }
			BAD { notSent notReceived }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> start [ before_write_all \ message.startsWith("SSH-") \ identificationStringSent = true; ]
			start -> start [ after_readline \ message.startsWith("SSH-") \ identificationStringReceived = true; ]
			start -> sentAndReceived [ before_send_kex_init \ identificationStringSent && identificationStringReceived ]
			start -> notSent [ before_send_kex_init \ !identificationStringSent \ System.out.println("--> " + e.toString()); ]
			start -> notReceived [ before_send_kex_init \ !identificationStringReceived \ System.out.println("--> " + e.toString()); ]
		}
	}

	PROPERTY serverVersionProperty
	{
		STATES
		{
			ACCEPTING { exceptionThrown validVersion }
			BAD { exceptionNotThrown }
			NORMAL { shouldThrowException }
			STARTING { start }
		}
		
		TRANSITIONS
		{
			start -> shouldThrowException [ after_readline \ !(message.startsWith("SSH-2.0") || message.startsWith("SSH-1.99")) ]
			start -> validVersion [ before_send_kex_init ]
			shouldThrowException -> exceptionThrown [ sshexception_check_banner ]
			shouldThrowException -> exceptionNotThrown [ before_send_kex_init \ \ System.out.println("--> " + e.toString()); ]
		}
	}
}